{"version":3,"sources":["components/form/input.js","components/form/button.js","components/form/sign-up.js","components/form/sign-in.js","components/form/tabs.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Input","props","type","required","value","onChange","name","Button","className","onClick","click","text","SignUp","state","first_name","last_name","email","password","handleChange","bind","submit","event","console","log","this","setState","target","newLine","msg","alert","id","action","method","React","Component","SignIn","req","href","Tab","class","link","buttonName","App","counterSlice","createSlice","initialState","reducers","increment","decrement","incrementByAmount","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f9c02c8.chunk.js","sourcesContent":["import react from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Input = props => \r\n<input type={props.type} required={props.required} value={props.value} onChange={props.onChange} name={props.name}/>\r\n\r\nexport default Input;\r\n\r\n","import react from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = props => \r\n<button type={props.type} className={props.className} onClick={props.click}>{props.text}</button>\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Input from './input';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './button';\r\nimport Submit from './submit';\r\n\r\nclass SignUp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first_name: '',\r\n      last_name: '',\r\n      email: '',\r\n      password: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.submit = this.submit.bind(this);\r\n\r\n\r\n  }\r\n  handleChange(event) {\r\n    console.log(event);\r\n    this.setState({\r\n      ...this.state, [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    var newLine = \"\\r\\n\";\r\n    var msg = 'Fist Name: ';\r\n    msg += this.state.first_name;\r\n    msg += newLine;\r\n    msg += 'Last Name: ';\r\n    msg += this.state.last_name;\r\n    msg += newLine;\r\n    msg += 'Email: ';\r\n    msg += this.state.email;\r\n    msg += newLine;\r\n    msg += 'Password: ';\r\n    msg += this.state.password;\r\n\r\n    alert(msg);\r\n    return;\r\n  }\r\n  render() {\r\n    return(\r\n    <div id=\"signup\">   \r\n              <h1>Sign Up for Free</h1>\r\n              \r\n              <form action=\"/\" method=\"post\">\r\n              \r\n              <div className=\"top-row\">\r\n                <div className=\"field-wrap\">\r\n                  <label>\r\n                    First Name<span className=\"req\">*</span>\r\n                  </label>\r\n                  <Input type=\"text\" required=\"required\" value={this.state.first_name} onChange={this.handleChange} name=\"first_name\"/>\r\n                </div>\r\n            \r\n                <div className=\"field-wrap\">\r\n                  <label>\r\n                    Last Name<span className=\"req\">*</span>\r\n                  </label>\r\n                  <Input type=\"text\" required=\"required\" value={this.state.last_name} onChange={this.handleChange} name=\"last_name\"/>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field-wrap\">\r\n                <label>\r\n                  Email Address<span className=\"req\">*</span>\r\n                </label>\r\n                <Input type=\"email\" required=\"required\" value={this.state.email} onChange={this.handleChange} name=\"email\"/>\r\n              </div>\r\n              \r\n              <div className=\"field-wrap\">\r\n                <label>\r\n                  Set A Password<span className=\"req\">*</span>\r\n                </label>\r\n                <Input type=\"password\" required=\"required\" value={this.state.password} onChange={this.handleChange} name=\"password\"/>\r\n              </div>\r\n              \r\n              <Button type=\"submit\" className=\"button button-block\" text=\"Get Started\" click={this.submit}></Button>\r\n              \r\n              </form>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp\r\n","import react from \"react\";\r\nimport Input from './input';\r\n\r\nconst SignIn = props => \r\n\r\n<div id=\"login\">   \r\n          <h1>Welcome Back!</h1>\r\n          \r\n          <form action=\"/\" method=\"post\">\r\n          \r\n            <div className=\"field-wrap\">\r\n            <label>\r\n              Email Address<span className=\"req\">*</span>\r\n            </label>\r\n            <Input type=\"email\" req= \"required\"></Input>\r\n          </div>\r\n          \r\n          <div className=\"field-wrap\">\r\n            <label>\r\n              Password<span className=\"req\">*</span>\r\n            </label>\r\n            <Input type=\"password\"></Input>\r\n          </div>\r\n          \r\n          <p className=\"forgot\"><a href=\"#\">Forgot Password?</a></p>\r\n          \r\n          <button className=\"button button-block\">Log In</button>       \r\n          </form>\r\n</div> \r\n\r\nexport default SignIn","import react from \"react\";\r\n\r\nconst Tab = props => \r\n<li className={props.class}><a href={props.link}>{props.buttonName}</a></li>\r\n\r\nexport default Tab;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './form.scss';\r\nimport SignUp from './components/form/sign-up';\r\nimport SignIn from './components/form/sign-in';\r\nimport Tab from './components/form/tabs';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"form\">\r\n      \r\n      <ul className=\"tab-group\">\r\n        <Tab class='tab' link='#signup' buttonName='Sign Up'></Tab>\r\n        <Tab class='tab' link='#login' buttonName='Log In'></Tab>\r\n      </ul>\r\n      \r\n      <div className=\"tab-content\">\r\n        <SignUp></SignUp>\r\n\r\n        <SignIn></SignIn>\r\n               \r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}