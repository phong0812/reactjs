{"version":3,"sources":["components/to-do/row.js","components/to-do/list.js","components/to-do/add.js","components/to-do/filter.js","components/to-do/index.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Row","props","console","log","type","onClick","this","changeStatus","name","removeRow","React","Component","List","list","map","todo","id","Add","state","inputValue","handleChange","bind","onSave","event","setState","target","value","addItem","ref","c","onChange","Filter","handleFilter","htmlFor","Todo","todos","status","addStatus","filter","onChangeFilter","key","filtered","item","change","ids","_map","max","Math","push","completed","className","App","counterSlice","createSlice","initialState","reducers","increment","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57987d2e.chunk.js","sourcesContent":["import React from \"react\";\r\n// import Input from './input';\r\n// import PropTypes from 'prop-types';\r\n// import Button from './button';\r\n// import Submit from './submit';\r\n\r\nclass Row extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log();\r\n    // this.state = {\r\n    //   first_name: '',\r\n    //   last_name: '',\r\n    //   email: '',\r\n    //   password: '',\r\n    // };\r\n\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    // this.submit = this.submit.bind(this);\r\n\r\n\r\n  }\r\n  // handleChange(event) {\r\n  //   console.log(event);\r\n  //   this.setState({\r\n  //     ...this.state, [event.target.name]: event.target.value\r\n  //   });\r\n  // }\r\n\r\n  // submit() {\r\n  //   var newLine = \"\\r\\n\";\r\n  //   var msg = 'Fist Name: ';\r\n  //   msg += this.state.first_name;\r\n  //   msg += newLine;\r\n  //   msg += 'Last Name: ';\r\n  //   msg += this.state.last_name;\r\n  //   msg += newLine;\r\n  //   msg += 'Email: ';\r\n  //   msg += this.state.email;\r\n  //   msg += newLine;\r\n  //   msg += 'Password: ';\r\n  //   msg += this.state.password;\r\n\r\n  //   alert(msg);\r\n  //   return;\r\n  // }\r\n  render() {\r\n    return(\r\n          <li>\r\n            <input type=\"checkbox\" onClick={this.props.changeStatus}/>\r\n            <label>{this.props.name}</label>\r\n            <button type=\"button\" onClick={this.props.removeRow}>x</button>\r\n          </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Row\r\n","import React from \"react\";\r\nimport Row from './row'\r\n\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    //() => this.removeRow(todo.id) work\r\n    // this.removeRow(todo.id) don't work\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        this.props.list.map((todo) =>\r\n                            <Row\r\n                                key={todo.id}\r\n                                id={todo.id}\r\n                                removeRow={() => this.props.removeRow(todo.id)}\r\n                                name={todo.name}\r\n                                changeStatus={() => this.props.changeStatus(todo.id)}\r\n                            ></Row>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport Input from \"../form/input\";\r\n\r\nclass Add extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: '',\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onSave = this.onSave.bind(this);\r\n\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n          ...this.state, inputValue: event.target.value\r\n        });\r\n    }\r\n    onSave() {\r\n        this.props.addItem(this.state.inputValue);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button type=\"button\" onClick={this.onSave}>Add</button>\r\n                <input type=\"text\" ref={(c) => this.state.inputValue} onChange={this.handleChange}></input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Add;\r\n","import React from \"react\";\r\nimport Input from \"../form/input\";\r\n\r\nclass Filter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"radio\" id=\"contactChoice1\"\r\n                       name=\"contact\" value=\"1\" onClick={() => this.props.handleFilter(1)}/>\r\n                <label htmlFor=\"contactChoice1\">All</label>\r\n\r\n                <input type=\"radio\" id=\"contactChoice2\"\r\n                       name=\"contact\" value=\"2\" onClick={() => this.props.handleFilter(2)}/>\r\n                <label htmlFor=\"contactChoice2\">Complete</label>\r\n\r\n                <input type=\"radio\" id=\"contactChoice3\"\r\n                       name=\"contact\" value=\"3\" onClick={() => this.props.handleFilter(3)}/>\r\n                <label htmlFor=\"contactChoice3\">Incomplete</label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport List from './list';\r\nimport Add from './add';\r\nimport Input from '../form/input';\r\nimport _map from 'lodash/map';\r\nimport Filter from \"./filter\";\r\n\r\n\r\n\r\nclass Todo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos:\r\n            [\r\n                {id: 1, name: 'Test1', status: false},\r\n                {id: 2, name: 'Test2', status: false}\r\n            ],\r\n            addStatus: false,\r\n            filter: 1,\r\n\r\n        };\r\n        this.removeRow = this.removeRow.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.changeStatus = this.changeStatus.bind(this);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n        this.onChangeFilter = this.onChangeFilter.bind(this);\r\n\r\n    }\r\n    removeRow(key) {\r\n        console.log(key);\r\n        let array = [...this.state.todos];\r\n        let filtered = array.filter(function(item) {\r\n            return item.id != key;\r\n        })\r\n        this.setState({\r\n            todos: filtered\r\n        });\r\n        // console.log(filtered);\r\n    };\r\n    changeStatus(id) {\r\n        const todos = this.state.todos;\r\n        let change = todos.map(function (item) {\r\n            return item.id === id ? item.status = !item.status : item.status;\r\n        })\r\n\r\n        this.setState({\r\n            change\r\n        });\r\n    };\r\n    addItem(name) {\r\n        console.log(name);\r\n        const todos = this.state.todos;\r\n        let ids = _map(todos, 'id');\r\n        let max = Math.max(...ids);\r\n        todos.push({\r\n            id: max+1,\r\n            name: name,\r\n            completed: false\r\n        });\r\n        console.log(todos);\r\n\r\n        this.setState({todos});\r\n    };\r\n    handleFilter() {\r\n        const todos = this.state.todos;\r\n        const filter = this.state.filter;\r\n        switch (filter) {\r\n            case 2:\r\n                return todos.filter(function (item) {\r\n                    return item.status === true\r\n                });\r\n            case 3:\r\n                return todos.filter(function (item) {\r\n                    return item.status === false\r\n                });\r\n            default:\r\n                return todos;\r\n        }\r\n    };\r\n    onChangeFilter(filter) {\r\n        this.setState({filter})\r\n    }\r\n\r\n    //() => this.removeRow(todo.id) work\r\n    // this.removeRow(todo.id) don't work\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Filter handleFilter={this.onChangeFilter}></Filter>\r\n                <div className=\"list\">\r\n                    <List list={this.handleFilter()} removeRow={this.removeRow} changeStatus={this.changeStatus}></List>\r\n                </div>\r\n                <Add addItem={item => this.addItem(item)}></Add>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\n// import './App.css';\r\n// import './form.scss';\r\n// import SignUp from './components/form/sign-up';\r\n// import SignIn from './components/form/sign-in';\r\n// import Tab from './components/form/tabs';\r\n// import Row from './components/to-do/row';\r\nimport Todo from './components/to-do/index';\r\n// this.state = {\r\n\r\n// }\r\n\r\nfunction App() {\r\n  // render(\r\n  //   onClick() {\r\n  //     console.log('abc');\r\n  //   };\r\n  \r\n  // )\r\n  return (\r\n    // <div className=\"form\">\r\n      \r\n    //   <ul className=\"tab-group\">\r\n    //     <Tab class='tab' link='#signup' buttonName='Sign Up'></Tab>\r\n    //     <Tab class='tab' link='#login' buttonName='Log In'></Tab>\r\n    //   </ul>\r\n      \r\n    //   <div className=\"tab-content\">\r\n    //     <SignUp></SignUp>\r\n\r\n    //     <SignIn></SignIn>\r\n               \r\n    //   </div>      \r\n    // </div>\r\n      <form>\r\n          <Todo></Todo>\r\n      </form>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}